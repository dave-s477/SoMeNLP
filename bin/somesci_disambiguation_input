#!/usr/bin/env python

import os
import argparse
import json

from pathlib import Path
from articlenizer import formatting

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description = "Get features for entity disambiguation from BRAT files")
    parser.add_argument("--in-paths", required=True, nargs='+', help="Paths to input directories")
    parser.add_argument("--out-path", required=True, help="Path to output file")
    args = parser.parse_args()

    folders = [x.rstrip('/') for x in args.in_paths]
    args.out_path = args.out_path.rstrip('/')
    if not os.path.isdir(args.out_path):
        os.makedirs(args.out_path)

    files = []
    for folder in folders:
        print("Loading files")
        all_txt_files = list(Path(folder).rglob('*.txt'))
        all_ann_files = list(Path(folder).rglob('*.ann'))
        plain_txt_names = set([p.with_suffix('') for p in all_txt_files])
        plain_ann_names = set([p.with_suffix('') for p in all_ann_files])

        all_files = plain_txt_names & plain_ann_names
        all_files = [{'txt': Path(str(p) + '.txt'), 'ann': Path(str(p) + '.ann')} for p in all_files]
        files.extend(all_files)

    linking_info = []
    for data in files:
        with data['txt'].open() as t_in, data['ann'].open() as a_in:
            text = t_in.read()
            ann = a_in.read()
            annotations = formatting.annotation_to_dict(ann)
            sentences = formatting.sentence_based_info(text, ann, False, False, False, False)
            for idx, sentence in enumerate(sentences):
                for k, ent in sentence['entities'].items():
                    if ent['label'].split('_')[0] in ['Application', 'PlugIn', 'OperatingSystem', 'ProgrammingEnvironment']:
                        path = str(data['txt']).split('/')[-1].split('.txt')[0]
                        paper_id = '{}{}'.format("https://www.ncbi.nlm.nih.gov/pmc/articles/", path) if "PMC" in path else '{}{}'.format('https://doi.org/', path.replace('_', '/'))
                        ent_linking_info = {
                            "mention": ent['string'],
                            "sentence": sentence['string'],
                            "sentence_id": idx,
                            "paper_id": paper_id,
                            "beg": ent['beg'],
                            "end": ent['end'],
                            "ent_type": ent['label'].split('_')[0],
                            "mention_context": ent['label'].split('_')[1],
                            "relations": [],
                            "relations_of": []
                        }
                        for _, rel in annotations['relations'].items():
                            if rel['arg2'] == k:
                                ent_linking_info['relations'].append({
                                    'type': rel['label'],
                                    'string': annotations['entities'][rel['arg1']]['string']
                                })
                            elif rel['arg1'] == k:
                                ent_linking_info['relations_of'].append({
                                    'type': rel['label'],
                                    'string': annotations['entities'][rel['arg2']]['string']
                                })
                        linking_info.append(ent_linking_info)

    with open(args.out_path + "/entity_linking_input.json", 'w') as j_out:
        json.dump(linking_info, j_out, indent=4)
